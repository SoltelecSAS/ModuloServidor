/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * Fr_Calibracion1.java
 *
 * Created on 21/07/2011, 09:17:04 AM
 */
package com.soltelec.servidor.igrafica;

import com.soltelec.servidor.model.Calibraciones;
import com.soltelec.servidor.model.Defxprueba;
import com.soltelec.servidor.model.HojaPruebas;
import com.soltelec.servidor.model.Medidas;
import com.soltelec.servidor.model.Propietarios;
import com.soltelec.servidor.model.Pruebas;
import com.soltelec.servidor.model.Vehiculos;
import com.soltelec.servidor.dao.CalibracionesJpaController;
import com.soltelec.servidor.dao.PruebasJpaController;
import com.soltelec.servidor.utils.GenericExportExcel;
import com.soltelec.servidor.utils.JTitlePanel;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SOLTELEC
 */
public final class AnalizadoresCDA extends javax.swing.JInternalFrame {

    JFileChooser fc;
    private Object calendarPanel;
    JPanel componentPanel;
    JTitlePanel componentTitlePanel;
    private DefaultTableModel modelo;
    private DefaultTableModel modelo2;
    private DefaultTableModel modelo3;
    private DefaultTableModel modelo4;
    Date finicial = new Date();
    Date ffinal = new Date();

    /**
     * Creates new form Fr_Calibracion1
     */
    public AnalizadoresCDA() {
        super("Medidas Calibración",
                true, //resizable
                true, //closable
                false, //maximizable
                true);
        iniciarModelo3();
        initComponents();
        configurarRadioButtons();
        dimension();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup3 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jXDatePicker1.setFormats(new SimpleDateFormat("dd/MM/yyyy"));
        jXDatePicker2 = new org.jdesktop.swingx.JXDatePicker();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jRadioButtonDiesel = new javax.swing.JRadioButton();
        jRadioButtonGasolina = new javax.swing.JRadioButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        JScrollPane1 = new javax.swing.JScrollPane();
        tblPruebaGases = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblVerificaciones = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPruebasAbortadas = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblPruebaSonora = new javax.swing.JTable();
        progreso = new javax.swing.JProgressBar();

        setClosable(true);
        setMaximumSize(this.getToolkit().getScreenSize());

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/16x16/page_down.png"))); // NOI18N
        jButton1.setText("Mostrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/16x16/save.png"))); // NOI18N
        jButton2.setText("Guardar");
        jButton2.setName("Prueba de Gases"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Fecha Inicial");

        jLabel6.setText("Fecha Final");

        jRadioButtonDiesel.setText("Diesel");
        jRadioButtonDiesel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonDieselActionPerformed(evt);
            }
        });

        jRadioButtonGasolina.setText("Gasolina");

        jTabbedPane1.setMaximumSize(this.getToolkit().getScreenSize());
        jTabbedPane1.setName(""); // NOI18N
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(600, 400));

        JScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        JScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        JScrollPane1.setMaximumSize(this.getToolkit().getScreenSize());
        JScrollPane1.setName("Prueba de Gases"); // NOI18N

        tblPruebaGases.setModel(modelo3);
        tblPruebaGases.setName("Pruebas de Gases"); // NOI18N
        JScrollPane1.setViewportView(tblPruebaGases);
        tblPruebaGases.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);

        jTabbedPane1.addTab("Informacion De Pruebas de Gases", JScrollPane1);

        jScrollPane2.setMaximumSize(this.getToolkit().getScreenSize());

        CalibracionesJpaController mcal = new CalibracionesJpaController();
        modelo = new DefaultTableModel();

        List<Calibraciones> results = mcal.findCalibracionesByFecha(finicial, ffinal);

        // Ahora sólo hay que rellenar el DefaultTableModel con los datos del ResultSet. La forma "manual" de hacer esto es la siguiente
        // Creamos las columnas.
        modelo.addColumn("Serial");
        modelo.addColumn("PEF");
        modelo.addColumn("Fecha");
        modelo.addColumn("HC Bajo");
        modelo.addColumn("CO Bajo");
        modelo.addColumn("CO2 Bajo");
        modelo.addColumn("HC Medio");
        modelo.addColumn("CO Medio");
        modelo.addColumn("CO2 Medio");

        // Bucle para cada resultado en la consulta
        for (int i = 0; i < results.size(); i++) {

            // Se crea un array que será una de las filas de la tabla.
            Object[] fila = new Object[9]; // Hay tres columnas en la tabla

            // Se rellena cada posición del array con una de las columnas de la tabla en base de datos.
            fila[0] = results.get(i).getEquipo().getSerial();
            fila[1] = results.get(i).getEquipo().getPef();

            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy/MM/dd");
            String com = sdf.format(results.get(i).getCurdate());
            fila[2] = com;
            fila[3] = results.get(i).getValor1();
            fila[4] = results.get(i).getValor2();
            fila[5] = results.get(i).getValor3();
            fila[6] = results.get(i).getValor4();
            fila[7] = results.get(i).getValor5();
            fila[8] = results.get(i).getValor6();

            // Se añade al modelo la fila completa.
            modelo.addRow(fila);
        }
        tblVerificaciones.setModel(modelo);
        tblVerificaciones.setName("Verificaciones"); // NOI18N
        jScrollPane2.setViewportView(tblVerificaciones);

        jTabbedPane1.addTab("informacion de Verificaciones", jScrollPane2);

        jScrollPane3.setMaximumSize(this.getToolkit().getScreenSize());

        PruebasJpaController mprue = new PruebasJpaController();
        modelo2 = new DefaultTableModel();

        List<Pruebas> results2 = mprue.findPruebas_pruebaGases(finicial, ffinal);

        // Ahora sólo hay que rellenar el DefaultTableModel con los datos del ResultSet. La forma "manual" de hacer esto es la siguiente
        // Creamos las columnas.
        modelo2.addColumn("Nro Prueba");
        modelo2.addColumn("Hora y Fecha Prueba");
        modelo2.addColumn("Motivo aborto");
        modelo2.addColumn("Hora y Fecha Aborto");

        // Bucle para cada resultado en la consulta
        for (int i = 0; i < results2.size(); i++) {

            // Se crea un array que será una de las filas de la tabla.
            Object[] fila = new Object[4]; // Hay tres columnas en la tabla

            // Se rellena cada posición del array con una de las columnas de la tabla en base de datos.
            fila[0] = String.valueOf(results2.get(i).getIdPruebas());

            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy/MM/dd");
            String com = sdf.format(results2.get(i).getFechaprueba());
            fila[1] = com;
            com = sdf.format(results2.get(i).getFechaaborto());
            fila[2] = com;

            fila[3] = results2.get(i).getComentarioaborto();

            // Se añade al modelo la fila completa.
            modelo2.addRow(fila);
        }
        tblPruebasAbortadas.setModel(modelo2);
        tblPruebasAbortadas.setName("Pruebas Abortadas"); // NOI18N
        jScrollPane3.setViewportView(tblPruebasAbortadas);

        jTabbedPane1.addTab("Informacion de Pruebas Abortadas", jScrollPane3);

        jScrollPane5.setMaximumSize(this.getToolkit().getScreenSize());

        modelo4 = new DefaultTableModel();

        List<Pruebas> results3 = mprue.findPruebas_pruebaRuido(finicial, ffinal);

        // Ahora sólo hay que rellenar el DefaultTableModel con los datos del ResultSet. La forma "manual" de hacer esto es la siguiente
        // Creamos las columnas.
        modelo4.addColumn("Nro Prueba");
        modelo4.addColumn("Hora y Fecha Prueba");
        modelo4.addColumn("Motivo aborto");
        modelo4.addColumn("Hora y Fecha Aborto");
        modelo4.addColumn("PSonora Exosto");

        // Bucle para cada resultado en la consulta
        for (int i = 0; i < results3.size(); i++) {

            // Se crea un array que será una de las filas de la tabla.
            Object[] fila = new Object[6]; // Hay tres columnas en la tabla

            // Se rellena cada posición del array con una de las columnas de la tabla en base de datos.
            fila[0] = String.valueOf(results3.get(i).getIdPruebas());

            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy/MM/dd");
            String com = sdf.format(results3.get(i).getFechaprueba());
            fila[1] = com;
            com = sdf.format(results3.get(i).getFechaaborto());
            fila[2] = com;

            fila[3] = results3.get(i).getComentarioaborto();

            fila[4] = "";
            fila[5] = "";

            // Se añade al modelo la fila completa.
            modelo4.addRow(fila);
        }
        tblPruebaSonora.setModel(modelo4);
        tblPruebaSonora.setName("Pruebas Sonoras"); // NOI18N
        jScrollPane5.setViewportView(tblPruebaSonora);

        jTabbedPane1.addTab("Informacion Pruebas Sonoras", jScrollPane5);

        progreso.setMaximum(5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButtonDiesel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jRadioButtonGasolina)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(progreso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonDiesel)
                    .addComponent(jRadioButtonGasolina))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(7, 7, 7)
                .addComponent(progreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dimension() {
        Dimension dim = super.getToolkit().getScreenSize();
        setSize((int) dim.getWidth() - ((int) dim.getWidth() * 1) / 100, (int) dim.getHeight() - 97);
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jXDatePicker1.getDate() == null || jXDatePicker2.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Seleccione Fechas");
            return;
        }

        progreso.setValue(1);

        SwingUtilities.invokeLater(
                new Runnable() {

            @Override
            public void run() {
                com.soltelec.servidor.model.Equipos eq = new com.soltelec.servidor.model.Equipos();
                CalibracionesJpaController mcal = new CalibracionesJpaController();
                modelo = new DefaultTableModel();
                finicial = jXDatePicker1.getDate();
                ffinal = jXDatePicker2.getDate();
                List<Calibraciones> results = mcal.findCalibracionesByFecha(finicial, ffinal);

                // Ahora sólo hay que rellenar el DefaultTableModel con los datos del ResultSet. La forma "manual" de hacer esto es la siguiente
                // Creamos las columnas.
                modelo.addColumn("Serial");
                modelo.addColumn("PEF");
                modelo.addColumn("Fecha");
                modelo.addColumn("HC Bajo");
                modelo.addColumn("CO Bajo");
                modelo.addColumn("CO2 Bajo");
                modelo.addColumn("HC Medio");
                modelo.addColumn("CO Medio");
                modelo.addColumn("CO2 Medio");
                modelo.addColumn("Responsable");
                modelo.addColumn("Tipo Calibracion");
                modelo.addColumn("Estado");

                for (Calibraciones result : results) {
                    if (result.getTipoCalibracion().getIdTipoCalibracion() == 2) {
                        // Se crea un array que será una de las filas de la tabla.
                        Object[] fila = new Object[12]; // Hay tres columnas en la tabla
                        // Se rellena cada posición del array con una de las columnas de la tabla en base de datos.
                        fila[0] = result.getEquipo().getSerial();
                        fila[1] = result.getEquipo().getPef();
                        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy/MM/dd");
                        String com = sdf.format(result.getFecha());
                        fila[2] = com;
                        fila[3] = result.getValor1();
                        fila[4] = result.getValor2();
                        fila[5] = result.getValor3();
                        fila[6] = result.getValor4();
                        fila[7] = result.getValor5();
                        fila[8] = result.getValor6();
                        fila[9] = result.getUsuario().getNombreusuario();
                        fila[10] = result.getTipoCalibracion().getTipoCalibracion();
                        fila[11] = (result.isAprobada()) ? "APROBADA" : "NO APROBADA";
                        // Se añade al modelo la filaInforme completa.
                        modelo.addRow(fila);
                    }
                }
                tblVerificaciones.setModel(modelo);

                jScrollPane2.setViewportView(tblVerificaciones);
                progreso.setValue(2);

//Pruebas de Gases Datos
                PruebasJpaController mprue = new PruebasJpaController();
                modelo2 = new DefaultTableModel();
                finicial = jXDatePicker1.getDate();
                ffinal = jXDatePicker2.getDate();
                List<Pruebas> results2 = mprue.findPruebas_pruebaGases(finicial, ffinal);

// Ahora sólo hay que rellenar el DefaultTableModel con los datos del ResultSet. La forma "manual" de hacer esto es la siguiente
// Creamos las columnas.
                modelo2.addColumn("Nro Prueba");
                modelo2.addColumn("Hora y Fecha Prueba");
                modelo2.addColumn("Motivo aborto");
                modelo2.addColumn("Hora y Fecha Aborto");

// Bucle para cada resultado en la consulta
                for (int i = 0; i < results2.size(); i++) {

                    // Se crea un array que será una de las filas de la tabla.
                    Object[] fila = new Object[4]; // Hay tres columnas en la tabla

                    // Se rellena cada posición del array con una de las columnas de la tabla en base de datos.
                    fila[0] = results2.get(i).getIdPruebas();

                    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy/MM/dd");

                    String com = sdf.format(results2.get(i).getFechaPrueba());
                    fila[1] = com;

                    fila[2] = results2.get(i).getComentarioAborto();

                    if (results2.get(i).getFechaAborto() != null) {
                        fila[3] = results2.get(i).getFechaAborto();
                    } else {
                        fila[3] = "";
                    }
                    // Se añade al modelo la filaInforme completa.
                    modelo2.addRow(fila);
                }
                tblPruebasAbortadas.setModel(modelo2);

                jScrollPane3.setViewportView(tblPruebasAbortadas);

                progreso.setValue(3);

//Pruebas de Gases Datos
                finicial = jXDatePicker1.getDate();
                ffinal = jXDatePicker2.getDate();

                //List<Object[]> results3 = mprue.findMedidas_pruebaGases(finicial, ffinal);
// Ahora sólo hay que rellenar el DefaultTableModel con los datos del ResultSet. La forma "manual" de hacer esto es la siguiente
// Creamos las columnas.
//
//        String band = "";
//        String comp = "";
//        String medida = "";
//        MedidaGases mg = new MedidaGases();
                Object[] filaInforme;
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                List<HojaPruebas> listaHojaPruebasPorFecha;
                if (jRadioButtonDiesel.isSelected()) {
                    listaHojaPruebasPorFecha = mprue.listaHojaPruebasDieselPorFecha(finicial, ffinal);
                    filaInforme = new Object[44];
                } else {
                    listaHojaPruebasPorFecha = mprue.listaHojaPruebasNoDieselPorFecha(finicial, ffinal);
                    filaInforme = new Object[42];
                }

                progreso.setValue(4);

                iniciarModelo3();
                if (jRadioButtonGasolina.isSelected()) {
                    modelo3.addColumn("T MOTOR");//22
                    modelo3.addColumn("RPM RALENTI");//23
                    modelo3.addColumn("HC RALENTI");//24
                    modelo3.addColumn("CO RALENTI");//25
                    modelo3.addColumn("CO2 RALENTI");//26
                    modelo3.addColumn("O2 RALENTI");//27
                    modelo3.addColumn("RPM CRUCERO");//28
                    modelo3.addColumn("HC CRUCERO");//29
                    modelo3.addColumn("CO CRUCERO");//30
                    modelo3.addColumn("CO2 CRUCERO");//31
                    modelo3.addColumn("O2 CRUCERO");//32
                    modelo3.addColumn("FUGAS TUBO ESCAPE");//33
                    modelo3.addColumn("FUGAS SILENCIADOR");//34
                    modelo3.addColumn("PRESENCIA TAPAS COMBUSTIBLE");//35
                    modelo3.addColumn("PRESENCIA TAPA ACEITE");//36
                    modelo3.addColumn("SALIDAS ADICIONALES");//37
                    modelo3.addColumn("HUMO NEGRO AZUL");//38
                    modelo3.addColumn("INCUMPLIMIENTO NIVELES");//39
                    modelo3.addColumn("DILUCION");//40
                    modelo3.addColumn("RESULTADO DE LA PRUEBA");//41
                } else {
                    modelo3.addColumn("MODIFICACIONES AL MOTOR");//22
                    modelo3.addColumn("VELOCIDAD RALENTI");//23
                    modelo3.addColumn("DIAMETRO");//24
                    modelo3.addColumn("VELOCIDAD GOBERNADA");//25
                    modelo3.addColumn("TEMP MOTOR");//26
                    modelo3.addColumn("CICLO PRELIMINAR");//27
                    modelo3.addColumn("PRIMER CICLO");//28
                    modelo3.addColumn("SEGUNDO CICLO");//29
                    modelo3.addColumn("TERCER CICLO");//30
                    modelo3.addColumn("PROMEDIO CICLOS");//31
                    modelo3.addColumn("FUGAS TUBO ESCAPE");//32
                    modelo3.addColumn("FUGAS SILENCIADOR");//33
                    modelo3.addColumn("AUSENCIA TAPA COMBUSTIBLE");//34
                    modelo3.addColumn("AUSENCIA TAPA ACEITE");//35
                    modelo3.addColumn("SALIDAS ADICIONALES");//36
                    modelo3.addColumn("HUMO BLANCO O AZUL");//37
                    modelo3.addColumn("OBSTACULOS ACELERADOR");//38
                    modelo3.addColumn("GOBERNADOR NO LIMITA");//39
                    modelo3.addColumn("VELOCIDAD NO ALCANZADA");//40
                    modelo3.addColumn("MAL FUNCIONAMIENTO MOTOR");//41
                    modelo3.addColumn("INCUMPLIMIENTO NIVELES");//42
                    modelo3.addColumn("RESULTADO DE LA PRUEBA");//43            
                }
                for (HojaPruebas hp : listaHojaPruebasPorFecha) {
                    int numeroTipoGasolina;
                    try {
                        numeroTipoGasolina = hp.getVehiculos().getTiposGasolina().getFueltype();
                    } catch (Exception exc) {
                        System.out.println("Swallow exception");
                        continue;//salta la ejecucion
                    }

                    for (Pruebas p : hp.getPruebasCollection()) {
                        try {
                            if (p.getTipoPrueba().getTesttype() == 8) {
                                filaInforme[0] = p.getIdPruebas();//Numero de Prueba
                                filaInforme[1] = sdf.format(p.getFechaPrueba());//Fecha de la prueba
                                filaInforme[2] = sdf.format(p.getFechaPrueba());//FEcha terminacion??
                                filaInforme[3] = p.getFechaAborto();//Fecha de aborto de la prueba
                                filaInforme[4] = p.getComentarioAborto();// No deacuerdo a codificacion
                                //Info Propietarios
                                Propietarios propietario = hp.getPropietarios();

                                filaInforme[5] = propietario.getNombres() + " " + propietario.getApellidos();//Nombres del propietario
                                filaInforme[6] = propietario.getTipoIdentificacion();//Tipo Identificacion
                                filaInforme[7] = propietario.getCarowner();//Numero de identifiacion
                                filaInforme[8] = propietario.getDireccion();//Direccion
                                filaInforme[9] = propietario.getNumerotelefono();//Telefono
                                //filaInforme[10] = propietario.getCelular().getCelular();
                                filaInforme[10] = propietario.getCiudadades().getNombreciudad();//no se captura la ciudad del propietario
                                //Vehiculo 
                                Vehiculos vehiculo = hp.getVehiculos();
                                filaInforme[11] = vehiculo.getMarcas().getNombremarca();//Marca del vehiculo
                                filaInforme[12] = vehiculo.getLineasVehiculos().getCrlname();//Linea
                                filaInforme[13] = vehiculo.getModelo();//Modelo
                                filaInforme[14] = vehiculo.getCarplate();//Placa
                                filaInforme[15] = vehiculo.getCilindraje();//Cilindraje
                                filaInforme[16] = vehiculo.getClasesVehiculo().getNombreclase();//Clase
                                filaInforme[17] = vehiculo.getServicios().getNombreservicio();//Servicio
                                filaInforme[18] = vehiculo.getNumeromotor();//Numero del motor
                                filaInforme[19] = vehiculo.getVin();//Numero de VIN o chasis
                                filaInforme[20] = vehiculo.getNumerolicencia();//numero de licencia
                                filaInforme[21] = vehiculo.getKilometraje();
                                filaInforme[22] = "----";//para que no se aloque el programa
                                filaInforme[23] = "----";
                                filaInforme[24] = "----";
                                filaInforme[25] = "----";
                                filaInforme[26] = "----";
                                filaInforme[27] = "----";
                                filaInforme[28] = "----";
                                filaInforme[29] = "----";
                                filaInforme[30] = "----";
                                filaInforme[31] = "----";
                                filaInforme[32] = "----";
                                filaInforme[33] = "----";
                                filaInforme[34] = "----";
                                filaInforme[35] = "----";
                                filaInforme[36] = "----";
                                filaInforme[37] = "----";
                                filaInforme[38] = "----";
                                filaInforme[39] = "----";
                                filaInforme[40] = "----";
                                filaInforme[41] = "----";
                                //Medidas

                                if ((numeroTipoGasolina == 1 || numeroTipoGasolina == 2 || numeroTipoGasolina == 4) && jRadioButtonGasolina.isSelected()) {
                                    for (Medidas m : p.getMedidasList()) {
                                        switch (m.getTiposMedida().getMeasuretype()) {
                                            case 8006://TEmp del motor
                                                filaInforme[22] = m.getValormedida();
                                                break;
                                            case 8005://rpm en ralenti
                                                filaInforme[23] = m.getValormedida();
                                                break;
                                            case 8001://HC ralenti
                                                filaInforme[24] = m.getValormedida();
                                                break;
                                            case 8002://CO ralenti
                                                filaInforme[25] = m.getValormedida();
                                                break;
                                            case 8003://CO2 Ralenti
                                                filaInforme[26] = m.getValormedida();
                                                break;
                                            case 8004://O2 Ralenti
                                                filaInforme[27] = m.getValormedida();
                                                break;
                                            case 8011://RPM CRUCERO
                                                filaInforme[28] = m.getValormedida();
                                                break;
                                            case 8007://HC crucero
                                                filaInforme[29] = m.getValormedida();
                                                break;
                                            case 8008://CO crucero
                                                filaInforme[30] = m.getValormedida();
                                                break;
                                            case 8009://CO2 crucero
                                                filaInforme[31] = m.getValormedida();
                                                break;
                                            case 8010://O2 crucero
                                                filaInforme[32] = m.getValormedida();
                                                break;
                                            default:

                                                break;

                                        }//end of siwtch tipo medida
                                    }//end of for medidas

                                    for (Defxprueba dxp : p.getDefectos()) {

                                        switch (dxp.getDefectos().getCardefault()) {
                                            case 84002://Fugas en el tubo de escape o en el silenciador
                                                filaInforme[33] = "X";
                                                filaInforme[34] = "X";
                                                break;
                                            case 84000://Ausencia de la tapa de combustible
                                                filaInforme[35] = "X";
                                                break;
                                            case 84001://Ausencia de la tapa de aceite
                                                filaInforme[36] = "X";
                                                break;
                                            case 84003://Salidas adicionales a las del diseño original
                                                filaInforme[37] = "X";
                                                break;
                                            case 84004://Presencia de humo negro
                                                filaInforme[38] = "X";
                                                break;
                                            case 84018://Incumplimiento niveles establecidos por las autoridades
                                                filaInforme[39] = "X";
                                                break;
                                            default:
                                                break;
                                            //Dilucion yuca no se registra todavia hace falta ponerla como defecto o algo asi    
                                        }//end of switch del codigo de defecto

                                    }//end of for de defectos 
                                    filaInforme[40] = "---";
                                    if (p.getAprobada().trim().equalsIgnoreCase("Y")) {
                                        filaInforme[41] = "Aprobada";
                                    } else if (p.getAprobada().trim().equalsIgnoreCase("N")) {
                                        filaInforme[41] = "Reprobada";
                                    }
                                }//end if vehiculo de gasolina
                                //si los vehiculos son diesel
                                if (numeroTipoGasolina == 3 && jRadioButtonDiesel.isSelected()) {
                                    //22 y 23 son defectos
                                    filaInforme[42] = "----";
                                    filaInforme[22] = "--";
                                    //filaInforme[23] = "--";
                                    filaInforme[24] = vehiculo.getDiametro();
                                    for (Medidas m : p.getMedidasList()) {
                                        switch (m.getTiposMedida().getMeasuretype()) {
                                            case 8035: //Velocidad Ralenti
                                                filaInforme[23] = m.getValormedida();
                                                break;
                                            case 8036: //Velocidad Gobernada
                                                filaInforme[25] = m.getValormedida();
                                                break;
                                            case 8034: //Temperatura Motor
                                                filaInforme[26] = m.getValormedida();
                                                break;
                                            case 8033://valor del ciclo cero
                                                filaInforme[27] = m.getValormedida();
                                                break;
                                            case 8013://primer ciclo de opacidad
                                                filaInforme[28] = m.getValormedida();
                                                break;
                                            case 8014://segundo ciclo
                                                filaInforme[29] = m.getValormedida();
                                                break;
                                            case 8015://tercer ciclo
                                                filaInforme[30] = m.getValormedida();
                                                break;
                                            case 8017://Promedio ciclos
                                                filaInforme[31] = m.getValormedida();
                                                break;
                                            default:
                                                break;

                                        }//end switch de las medidas                         
                                    }//end for de medidas
                                    //defectos
                                    for (Defxprueba dxp : p.getDefectos()) {

                                        switch (dxp.getDefectos().getCardefault()) {
                                            case 84002://fugas tubo de escape o silenciador
                                                filaInforme[32] = "X";
                                                filaInforme[33] = "X";
                                                break;
                                            case 84000://ausencia de la tapa de combustible
                                                filaInforme[34] = "X";
                                                break;
                                            case 84001://asuencia de la taba de aceite
                                                filaInforme[35] = "X";
                                                break;
                                            case 84003://salidas adicionales
                                                filaInforme[36] = "X";
                                                break;
                                            case 84004://Humo
                                                filaInforme[37] = "X";
                                                break;
                                            case 84005://Obstaculos impiden el avance del Pedal    
                                                filaInforme[38] = "X";
                                                break;
                                            case 84006://aml funcionamiento del motor
                                                filaInforme[41] = "X";
                                                break;
                                            case 84007://Gobernador no limita las revoluciones
                                                filaInforme[39] = "X";
                                                break;
                                            //no existe defecot vehiculo no alcanza gobernadas    
                                            case 84018://concentraciones
                                                filaInforme[42] = "X";
                                                System.out.println("Defecto: prueba:" + p.getIdPruebas());
                                                break;
                                            default:
                                                System.out.println("Switch entro al default:  defecto" + dxp.getDefectos().getCardefault());

                                                break;
                                        }//end switch de los defectos
                                        //Resultado

                                    }//end for de defectos
                                    filaInforme[43] = p.getAprobada().equalsIgnoreCase("N") ? "Reprobada" : "Aprobada";

                                }//end if vehiculo diesel                  
                                modelo3.addRow(filaInforme);
                            }//end if es prueba de gasolina
                        }//end of catch
                        catch (Exception exc) {
                            System.out.println("Swallow ");
                            exc.printStackTrace(System.err);
                        }

                    }//end for de pruebas en la hoja de pruebas
                }//end for de hojas de pruebas   

                tblPruebaGases.setModel(modelo3);
                modelo3.fireTableDataChanged();

                //jScrollPane4.setViewportView(jTable4);
//Pruebas de Ruido Datos
                modelo4 = new DefaultTableModel();
                finicial = jXDatePicker1.getDate();
                ffinal = jXDatePicker2.getDate();
                List<Pruebas> listaPruebasPorFecha = mprue.findPruebas_pruebaRuido(finicial, ffinal);

                // Ahora sólo hay que rellenar el DefaultTableModel con los datos del ResultSet. La forma "manual" de hacer esto es la siguiente
                // Creamos las columnas.
                modelo4.addColumn("Nro Prueba");
                modelo4.addColumn("Hora y Fecha Prueba");
                modelo4.addColumn("Motivo aborto");
                modelo4.addColumn("Hora y Fecha Aborto");
                modelo4.addColumn("PSonora Exosto");

                System.out.println("Final");
                // Bucle para cada resultado en la consulta
                for (Pruebas p : listaPruebasPorFecha) {

                    // Se crea un array que será una de las filas de la tabla.
                    Object[] fila = new Object[6]; // Hay tres columnas en la tabla

                    fila[0] = p.getIdPruebas();
                    fila[1] = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(p.getFechaPrueba());
                    fila[2] = p.getComentarioAborto() != null ? p.getComentarioAborto() : " ";
                    fila[3] = p.getFechaAborto() != null ? p.getFechaAborto() : " ";
                    if (p.getMedidasList() != null) {
                        List<Medidas> listaMed = p.getMedidasList();
                        for (Medidas m : listaMed) {
                            if (m.getTiposMedida().getMeasuretype() == 7003) {
                                fila[4] = m.getValormedida();
                            }
                        }
                    }

                    modelo4.addRow(fila);
                }
                // Se añade al modelo la filaInforme completa.

                tblPruebaSonora.setModel(modelo4);

                jScrollPane5.setViewportView(tblPruebaSonora);
                progreso.setValue(5);

            }
        });


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        List<JTable> tables = new ArrayList<>();
        tables.add(tblPruebaGases);
        tables.add(tblPruebaSonora);
        tables.add(tblPruebasAbortadas);
        tables.add(tblVerificaciones);

        GenericExportExcel excel = new GenericExportExcel();
        excel.exportExcel(tables);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jRadioButtonDieselActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonDieselActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonDieselActionPerformed

    /**
     * Installs the Kunststoff and Plastic Look And Feels if available in
     * classpath.
     */
    public final void initializeLookAndFeels() {
        // if in classpath thry to load JGoodies Plastic Look & Feel
        try {
            UIManager.installLookAndFeel("JGoodies Plastic 3D",
                    "com.jgoodies.plaf.plastic.Plastic3DLookAndFeel");
            UIManager.setLookAndFeel("com.jgoodies.plaf.plastic.Plastic3DLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException t) {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
                e.printStackTrace(System.err);
            }
        }
    }

    /**
     * The applet is a PropertyChangeListener for "locale" and "calendar".
     *
     * @param evt Description of the Parameter
     */
    public void propertyChange(PropertyChangeEvent evt) {
        if (calendarPanel != null) {
            if (evt.getPropertyName().equals("calendar")) {
                // calendar = (Calendar) evt.getNewValue();
                // DateFormat df = DateFormat.getDateInstance(DateFormat.LONG,
                // jcalendar.getLocale());
                // dateField.setText(df.format(calendar.getTime()));
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane JScrollPane1;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JRadioButton jRadioButtonDiesel;
    private javax.swing.JRadioButton jRadioButtonGasolina;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker2;
    private javax.swing.JProgressBar progreso;
    private javax.swing.JTable tblPruebaGases;
    private javax.swing.JTable tblPruebaSonora;
    private javax.swing.JTable tblPruebasAbortadas;
    private javax.swing.JTable tblVerificaciones;
    // End of variables declaration//GEN-END:variables

    private void iniciarModelo3() {
        modelo3 = new DefaultTableModel();
        modelo3.addColumn("Numero Prueba");//0
        modelo3.addColumn("Fecha y Hora Inicio An");//1
        modelo3.addColumn("Fecha y Hora Fin An");//2
        modelo3.addColumn("Fecha y Hora Aborto");//3
        modelo3.addColumn("Causa Aborto");//4
        modelo3.addColumn("PROPIETARIO");//5
        modelo3.addColumn("TIPO DOC");//6
        modelo3.addColumn("No. DOCUMENTO");//7
        modelo3.addColumn("DIRECCION");//8
        modelo3.addColumn("TELEFONO");//9
        modelo3.addColumn("CIUDAD");//10
        modelo3.addColumn("MARCA");//11
        modelo3.addColumn("LINEA");//12
        modelo3.addColumn("AÑO MODELO");//13
        modelo3.addColumn("PLACA");//14
        modelo3.addColumn("CILINDRAJE");//15
        modelo3.addColumn("CLASE");//16
        modelo3.addColumn("SERVICIO");//17
        modelo3.addColumn("No MOTOR");//18
        modelo3.addColumn("No VIN");//19
        modelo3.addColumn("LIC TRANSITO");//20
        modelo3.addColumn("KILOMETRAJE");//21

    }

    private void configurarRadioButtons() {
        jRadioButtonGasolina.setSelected(true);
        buttonGroup3.add(jRadioButtonDiesel);
        buttonGroup3.add(jRadioButtonGasolina);
    }
}
