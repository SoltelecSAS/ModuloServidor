/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * FrInt1.java
 *
 * Created on 30/06/2011, 11:05:09 AM
 */
package com.soltelec.servidor.igrafica;

import com.soltelec.servidor.dao.CdaJpaController;
import com.soltelec.servidor.dao.HojaPruebasJpaController;
import com.soltelec.servidor.dao.UsuariosJpaController;
import com.soltelec.servidor.dao.VehiculosJpaController;
import com.soltelec.servidor.model.Cda;
import com.soltelec.servidor.model.HojaPruebas;
import com.soltelec.servidor.model.Medidas;
import com.soltelec.servidor.model.Pruebas;
import com.soltelec.servidor.model.Usuarios;
import com.soltelec.servidor.model.Vehiculos;
import com.soltelec.servidor.utils.CMensajes;
import com.soltelec.servidor.utils.CValidaciones;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author SOLTELEC
 */
public class FrmCorrecionDeOxigeno extends javax.swing.JInternalFrame {

    DefaultTableModel ModeloAntesCorrecion, ModeloDespuesCorrecion;
    public Integer IdVehiculo = 0;

    private static final Logger LOG = Logger.getLogger(FrmSimulacion.class.getName());

    /**
     * Creates new form FrInt1
     */
    public FrmCorrecionDeOxigeno() {
        super("Correcci처n de oxigeno",
                true, //resizable
                true, //closable
                false, //maximizable
                true);

        initComponents();
        initModels();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Correcci처n de oxigeno"));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jPanel1 = new javax.swing.JPanel();
        LblDespues = new javax.swing.JLabel();
        LblAntes = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        ButtonBuscar = new javax.swing.JButton();
        ButtonCancelar = new javax.swing.JButton();
        txtPlaca = new javax.swing.JTextField();
        TblDespues = new javax.swing.JScrollPane();
        tblDespuesCorreccion = new javax.swing.JTable();
        TblAntes = new javax.swing.JScrollPane();
        tblAntesCorrecion = new javax.swing.JTable();

        setClosable(true);
        setResizable(true);
        setTitle("SICOV");
        setFrameIcon(null);
        setPreferredSize(new java.awt.Dimension(500, 500));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        getContentPane().add(jToolBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1396, 0, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Usuarios"));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LblDespues.setText("Medidas despues de la correcion de oxigeno ");
        jPanel1.add(LblDespues, new org.netbeans.lib.awtextra.AbsoluteConstraints(563, 263, 280, -1));

        LblAntes.setText("Medidas antes de la correcion de oxigeno ");
        jPanel1.add(LblAntes, new org.netbeans.lib.awtextra.AbsoluteConstraints(594, 89, 257, -1));

        jLabel1.setText("Placa:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 42, -1, -1));

        ButtonBuscar.setText("BUSCAR");
        ButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(731, 38, -1, -1));

        ButtonCancelar.setText("CANCELAR");
        ButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 38, -1, -1));
        jPanel1.add(txtPlaca, new org.netbeans.lib.awtextra.AbsoluteConstraints(566, 39, 147, -1));

        TblDespues.setMaximumSize(this.getToolkit().getScreenSize());
        TblDespues.setName("Prueba de Gases"); // NOI18N

        tblDespuesCorreccion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblDespuesCorreccion.setName("Pruebas de Gases"); // NOI18N
        TblDespues.setViewportView(tblDespuesCorreccion);
        tblDespuesCorreccion.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);

        jPanel1.add(TblDespues, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 300, 888, 107));
        TblDespues.getAccessibleContext().setAccessibleName("");

        TblAntes.setMaximumSize(this.getToolkit().getScreenSize());
        TblAntes.setName("Prueba de Gases"); // NOI18N

        tblAntesCorrecion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblAntesCorrecion.setName("Pruebas de Gases"); // NOI18N
        TblAntes.setViewportView(tblAntesCorrecion);
        tblDespuesCorreccion.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);

        jPanel1.add(TblAntes, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 121, 888, 107));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1390, 470));
        jPanel1.getAccessibleContext().setAccessibleName("UrlSicov");

        getAccessibleContext().setAccessibleName("UrlSicov");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCancelarActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_ButtonCancelarActionPerformed

    private void ButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBuscarActionPerformed
        // TODO add your handling code here:~
        initModels();
        String Placa = txtPlaca.getText().toUpperCase();
        if (ValidarPlaca(Placa)) {

            if (ValidarSiExiste(Placa)) {
                if (ValidarSiEsMoto(Placa)) {
                    CargarDatos(Placa);

                } else {
                    JOptionPane.showMessageDialog(this, "La placa que ingreso no pertenece a una moto por favor intentelo de nuevo.", "No es moto", JOptionPane.ERROR_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(this, "La placa que ingreso no existe, por favor intentelo de nuevo con una placa existente.", "Placa inexistente", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Placa no valida", "Por favor ingrese una placa valida", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_ButtonBuscarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonBuscar;
    private javax.swing.JButton ButtonCancelar;
    private javax.swing.JLabel LblAntes;
    private javax.swing.JLabel LblDespues;
    private javax.swing.JScrollPane TblAntes;
    private javax.swing.JScrollPane TblDespues;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTable tblAntesCorrecion;
    private javax.swing.JTable tblDespuesCorreccion;
    private javax.swing.JTextField txtPlaca;
    // End of variables declaration//GEN-END:variables

    public boolean ValidarPlaca(String Placa) {
        boolean Valida = true;
        if (Placa.length() < 3) {
            Valida = false;
        }
        return Valida;

    }

    private void initModels() {
        ModeloAntesCorrecion = new DefaultTableModel();
        ModeloDespuesCorrecion = new DefaultTableModel();
        ModeloAntesCorrecion.addColumn("Fecha");
        ModeloAntesCorrecion.addColumn("N째 Hoja de prueba");
        ModeloAntesCorrecion.addColumn("Hidrocarburos (HC)");
        ModeloAntesCorrecion.addColumn("Monoxido de carbono (CO)");
        ModeloAntesCorrecion.addColumn("Dioxido de carbono (CO2)");
        ModeloAntesCorrecion.addColumn("Oxigeno (O2)");

        ModeloDespuesCorrecion.addColumn("Fecha");
        ModeloDespuesCorrecion.addColumn("N째 Hoja de prueba");
        ModeloDespuesCorrecion.addColumn("Hidrocarburos (HC)");
        ModeloDespuesCorrecion.addColumn("Monoxido de carbono (CO)");
        ModeloDespuesCorrecion.addColumn("Dioxido de carbono (CO2)");
        ModeloDespuesCorrecion.addColumn("Oxigeno (O2)");

    }

    private void CargarDatos(String placa) {
        Double HCAnt = 0.0, CO = 0.0, COANT = 0.0, CO2 = 0.0, CO2ANT = 0.0, O2 = 0.0, HCDesp = 0.0;
        //List<HojaPruebas> listaHojaPruebas = new HojaPruebasJpaController().findByCarplate(placa);
        Object[] DatosAntes, DatosDespues;
        DatosAntes = new Object[ModeloAntesCorrecion.getColumnCount()];
        DatosDespues = new Object[ModeloDespuesCorrecion.getColumnCount()];
        List<HojaPruebas> ListaHojasPruebas = new HojaPruebasJpaController().findByIdVehiculo(IdVehiculo);
        System.out.println("numero de hojas de prueba que posee el vehiculo : " + ListaHojasPruebas.size());
        for (HojaPruebas hp : ListaHojasPruebas) {
            System.out.println("hoja de prueba numero : " + hp.getTestsheet());
            int Tiempos = hp.getVehiculos().getTiemposmotor();
            for (Pruebas p : hp.getPruebasCollection()) {
                if (p.getTipoPrueba().getTesttype() == 8) {
                    for (Medidas m : p.getMedidasList()) {
                        switch (m.getTiposMedida().getMeasuretype()) {
                            case 8001:
                                HCDesp = (double) m.getValormedida();
                                System.out.println("valor HC despues de la correccion---" + HCDesp);
                                break;
                            case 8002:
                                CO = (double) m.getValormedida();
                                System.out.println("valor CO despues de la correccion--" + CO);
                                break;
                            case 8003:
                                CO2 = (double) m.getValormedida();
                                System.out.println("valor CO2 despues de la correccion--" + CO2);
                                break;
                            case 8004:
                                O2 = (double) m.getValormedida();
                                System.out.println("valor O2 despues de la correccion--" + O2);
                                break;
                            case 8018:
                                HCDesp = (double) m.getValormedida();
                                System.out.println("valor HC despues de la correccion---" + HCDesp);
                                break;
                            case 8020:
                                CO = (double) m.getValormedida();
                                System.out.println("valor CO despues de la correccion--" + CO);
                                break;
                            case 8019:
                                CO2 = (double) m.getValormedida();
                                System.out.println("valor CO2 despues de la correccion--" + CO2);
                                break;
                            case 8021:
                                O2 = (double) m.getValormedida();
                                System.out.println("valor O2 despues de la correccion--" + O2);
                                break;
                        }
                    }/*despues de esto*/
                    if (Tiempos == 2 && O2 > 11) {
                        System.out.println("entro if 1");
                        HCAnt = (HCDesp / ((21 - 11) / (21 - O2)));
                        COANT = (CO / ((21 - 11) / (21 - O2)));
                        CO2ANT = (CO2 / ((21 - 11) / (21 - O2)));
                        //new SimpleDateFormat("yyyy-MM-dd hh:mm a").format(p.getFechaPrueba())
                        DatosAntes[0] = new SimpleDateFormat("yyyy-MM-dd hh:mm a").format(p.getFechaPrueba());
                        DatosAntes[1] = hp.getTestsheet();
                        DatosAntes[2] = String.format("%.2f", HCAnt);
                        DatosAntes[3] = String.format("%.2f", COANT);
                        DatosAntes[4] = String.format("%.2f", CO2);
                        DatosAntes[5] = String.format("%.2f", O2);

                        DatosDespues[0] = new SimpleDateFormat("yyyy-MM-dd hh:mm a").format(p.getFechaPrueba());
                        DatosDespues[1] = hp.getTestsheet();
                        DatosDespues[2] = String.format("%.2f", HCDesp);
                        DatosDespues[3] = String.format("%.2f", CO);
                        DatosDespues[4] = String.format("%.2f", CO2);
                        DatosDespues[5] = String.format("%.2f", O2);

                    } else if (Tiempos == 2 && O2 <= 11) {
                        System.out.println("entro if 2");
                        DatosAntes[0] = new SimpleDateFormat("yyyy-MM-dd hh:mm a").format(p.getFechaPrueba());
                        DatosAntes[1] = hp.getTestsheet();
                        DatosAntes[2] = String.format("%.2f", HCDesp);
                        DatosAntes[3] = String.format("%.2f", CO);
                        DatosAntes[4] = String.format("%.2f", CO2);
                        DatosAntes[5] = String.format("%.2f", O2);

                        DatosDespues[0] = new SimpleDateFormat("yyyy-MM-dd hh:mm a").format(p.getFechaPrueba());
                        DatosDespues[1] = hp.getTestsheet();
                        DatosDespues[2] = "No hubo correccion de oxigeno";
                        DatosDespues[3] = "No hubo correccion de oxigeno";
                        DatosDespues[4] = "No hubo correccion de oxigeno";
                        DatosDespues[5] = "No hubo correccion de oxigeno";

                    } else if (Tiempos == 4 && O2 > 6) {
                        System.out.println("entro if 3");

                        HCAnt = (HCDesp / ((21 - 6) / (21 - O2)));
                        COANT = (CO / ((21 - 6) / (21 - O2)));
                        CO2ANT = (CO2 / ((21 - 6) / (21 - O2)));
                        System.out.println("HC antes de la correcion: " + HCAnt);
                        DatosAntes[0] = new SimpleDateFormat("yyyy-MM-dd hh:mm a").format(p.getFechaPrueba());
                        DatosAntes[1] = hp.getTestsheet();
                        DatosAntes[2] = String.format("%.2f", HCAnt);
                        DatosAntes[3] = String.format("%.2f", COANT);
                        DatosAntes[4] = String.format("%.2f", CO2);
                        DatosAntes[5] = String.format("%.2f", O2);

                        DatosDespues[0] = new SimpleDateFormat("yyyy-MM-dd hh:mm a").format(p.getFechaPrueba());
                        DatosDespues[1] = hp.getTestsheet();
                        DatosDespues[2] = String.format("%.2f", HCDesp);
                        DatosDespues[3] = String.format("%.2f", CO);
                        DatosDespues[4] = String.format("%.2f", CO2);
                        DatosDespues[5] = String.format("%.2f", O2);

                    } else if (Tiempos == 4 && O2 <= 6) {
                        System.out.println("entro if 4");
                        DatosAntes[0] = new SimpleDateFormat("yyyy-MM-dd hh:mm a").format(p.getFechaPrueba());
                        DatosAntes[1] = hp.getTestsheet();
                        DatosDespues[2] = String.format("%.2f", HCDesp);
                        DatosDespues[3] = String.format("%.2f", CO);
                        DatosDespues[4] = String.format("%.2f", CO2);
                        DatosDespues[5] = String.format("%.2f", O2);

                        DatosDespues[0] = new SimpleDateFormat("yyyy-MM-dd hh:mm a").format(p.getFechaPrueba());
                        DatosDespues[1] = hp.getTestsheet();
                        DatosDespues[2] = "No hubo correccion de oxigeno";
                        DatosDespues[3] = "No hubo correccion de oxigeno";
                        DatosDespues[4] = "No hubo correccion de oxigeno";
                        DatosDespues[5] = "No hubo correccion de oxigeno";

                    }
                }

            }
            ModeloAntesCorrecion.addRow(DatosAntes);
            ModeloDespuesCorrecion.addRow(DatosDespues);
        }
        tblDespuesCorreccion.setModel(ModeloDespuesCorrecion);
        tblAntesCorrecion.setModel(ModeloAntesCorrecion);
        tblDespuesCorreccion.setEnabled(false);
        tblAntesCorrecion.setEnabled(false);
        TblAntes.setVisible(true);
        TblDespues.setVisible(true);

    }

    private boolean ValidarSiEsMoto(String placa) {
        boolean EsMoto = false;
        //List<Vehiculos> vehiculo = new VehiculosJpaController().findVehiculosByParameter("v.CARPLATE", placa, "=");
        List<Vehiculos> vehiculo = new VehiculosJpaController().findVehiculosByPlaca(placa);
        for (Vehiculos v : vehiculo) {
            if (v.getTipoVehiculo().getCartype() == 4) {
                EsMoto = true;
                IdVehiculo = v.getCar();
            }
        }
        System.out.println(" es moto ?" + EsMoto);
        return EsMoto;
    }

    private boolean ValidarSiExiste(String placa) {
        boolean Existe = true;
        List<Vehiculos> vehiculo = new VehiculosJpaController().findVehiculosByPlaca(placa);
        if (vehiculo == null || vehiculo.isEmpty()) {
            Existe = false;
        }
        System.out.println(" existe?+" + Existe);

        return Existe;
    }
}
