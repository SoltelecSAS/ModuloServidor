/*//GEN-FIRST:event_jTable2MouseClicked
 * To change this template, choose Tools | Templates//GEN-LAST:event_jTable2MouseClicked
 * and open the template in the editor.
 */

/*
 * FrInt1.java
 *
 * Created on 30/06/2011, 11:05:09 AM
 */
package com.soltelec.servidor.igrafica;

import com.soltelec.servidor.dao.Conexion;
import com.soltelec.servidor.dao.PruebasJpaController;
import com.soltelec.servidor.dao.TipoPruebaJpaController;
import com.soltelec.servidor.model.TipoPrueba;
import com.soltelec.servidor.utils.CMensajes;
import com.soltelec.servidor.utils.CargarArchivos;
import java.awt.Dimension;
import java.awt.Image;
import java.beans.PropertyVetoException;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.sql.*;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.imageio.ImageReadParam;
import javax.imageio.ImageReader;
import javax.imageio.stream.ImageInputStream;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

// Variables declaration - do not modify
/**
 *
 * @author GERENCIA TIC
 */
public class FrmPruebasDatos extends javax.swing.JInternalFrame {

    JTable jTable1 = new javax.swing.JTable();
    JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
    DefaultTableModel modelo;
    private JInternalFrame frame;
    private int ban;
    private int ban2;
    private int num;
    private int dTipoPrueba = 0;
    private int mprueba = 0;
    private DefaultTableModel modelo2;
    private DefaultTableModel modelo3;
    private DefaultTableModel modelo4;
    Icon icon = null;
    private Image data, data1;
    String user = "";
    String pass = "";
    private Properties props;
    private static final Logger LOG = Logger.getLogger(FrmPruebasDatos.class.getName());

    /**
     * Creates new form FrInt1
     */
    public FrmPruebasDatos(int ban, int num, JInternalFrame frame) {
        super("PruebasDatos",
                true, //resizable
                true, //closable
                false, //maximizable
                true);
        props = new Properties();
        try {
            props.load(CargarArchivos.cargarArchivo("conexion.properties"));
            user = com.soltelec.servidor.conexion.Conexion.getUsuario();
            pass = com.soltelec.servidor.conexion.Conexion.getContrasena();
        } catch (IOException e) {
            LOG.info(e.getMessage());
        }

        this.frame = frame;
        this.num = num;
        if (num == 0) {
            this.ban = ban;
        } else {
            this.ban2 = ban;
        }
//        Conexion.cargarConexion();

        initComponents();
        dimension();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setClosable(true);

        TipoPruebaJpaController prue = new TipoPruebaJpaController();
        PruebasJpaController mprue = new PruebasJpaController();
        modelo = new DefaultTableModel();

        List<TipoPrueba> results = prue.findTipoPrueba1();

        // Ahora sólo hay que rellenar el DefaultTableModel con los datos del ResultSet. La forma "manual" de hacer esto es la siguiente
        // Creamos las columnas.
        modelo.addColumn("Serial");
        modelo.addColumn("Tipo Prueba");

        // Bucle para cada resultado en la consulta
        for (int i = 0; i < results.size(); i++) {

            Object[] fila = new Object[2]; // Hay tres columnas en la tabla

            // Se rellena cada posición del array con una de las columnas de la tabla en base de datos.
            fila[0] = results.get(i).getTesttype();
            fila[1] = results.get(i).getNombretipoprueba();

            // Se añade al modelo la fila completa.
            modelo.addRow(fila);
        }
        jTable2.setModel(modelo);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        modelo2 = new DefaultTableModel();

        List<Object[]> results1;
        if (num == 0) {
            results1 = prue.findPrueba(ban, 1);
        } else {
            results1 = prue.findPruebaVehiculo(ban2, 1);
        }

        // Ahora sólo hay que rellenar el DefaultTableModel con los datos del ResultSet. La forma "manual" de hacer esto es la siguiente
        // Creamos las columnas.
        modelo2.addColumn("Prueba");
        modelo2.addColumn("Hoja Prueba");
        modelo2.addColumn("Tipo Prueba");
        modelo2.addColumn("Pista");
        modelo2.addColumn("Usuario");
        modelo2.addColumn("Autorizada");
        modelo2.addColumn("Aprobada");
        modelo2.addColumn("Abortada");
        modelo2.addColumn("Pecha Prueba");

        // Bucle para cada resultado en la consulta
        for (int i = 0; i < results1.size(); i++) {

            // Se crea un array que será una de las filas de la tabla.
            Object[] fila1 = new Object[9]; // Hay tres columnas en la tabla
            fila1 = results1.get(i);

            modelo2.addRow(fila1);
        }

        // Se añade al modelo la fila completa.
        jTable3.setModel(modelo2);
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jScrollPane4.setViewportView(jTable4);

        jScrollPane5.setViewportView(jTable5);

        PruebasJpaController mprue1 = new PruebasJpaController();
        Image dtCat = null;
        try {
            if (num == 0) {
                if (getfoto(1) != null) {
                    try {
                        dtCat = getfoto(1);
                    } catch (Exception e) {
                    }
                }

                data = dtCat.getScaledInstance(321, 230, Image.SCALE_AREA_AVERAGING);

                icon = new ImageIcon(data);
            } else {
                if (getfoto(3) != null) {
                    try {
                        dtCat = getfoto(3);
                    } catch (Exception e) {
                        System.out.println("error: " + e);
                    }

                    data = dtCat.getScaledInstance(321, 230, Image.SCALE_AREA_AVERAGING);

                    icon = new ImageIcon(data);
                }
            }
        } catch (Exception e) {
            LOG.info("No tiene imagenes");
        }

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(icon);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/servidor/images/image.png"))); // NOI18N
        jButton1.setText("Foto1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/servidor/images/image.png"))); // NOI18N
        jButton2.setText("Foto2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Pruebas");

        jLabel3.setText("Pruebas Ejecutadas");

        jLabel4.setText("Medidas Recolectadas");

        jLabel5.setText("Defectos en Medidas");

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/servidor/images/back.png"))); // NOI18N
        jButton3.setText("Atras");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jButton1)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(jButton2)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jButton3)))
                        .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                        .addGap(53, 53, 53)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jButton1)
                                                .addComponent(jButton2)))
                                .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                                        .addGap(1, 1, 1)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5)
                                        .addGap(4, 4, 4)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>                        

    public Image getfoto(int id) {

        try {
            String msql = "";

            Connection con = getConexion();
            if (id == 1) {
                msql = "SELECT f.Foto1 FROM fotos f, hoja_pruebas h WHERE  f.id_hoja_pruebas_for = h.TESTSHEET and h.TESTSHEET = " + ban + " ";
            } else if (id == 2) {
                msql = "SELECT f.Foto2 FROM fotos f, hoja_pruebas h WHERE  f.id_hoja_pruebas_for = h.TESTSHEET and h.TESTSHEET = " + ban + " ";
            } else if (id == 3) {
                msql = "SELECT f.Foto1, h.TESTSHEET FROM fotos f, hoja_pruebas h, Vehiculos v WHERE f.id_hoja_pruebas_for = h.TESTSHEET and h.Vehiculo_for = v.car and v.car = " + ban2 + " ";
            }

            PreparedStatement pstm = con.prepareStatement(msql);
            try (ResultSet res = pstm.executeQuery()) {
                int i = 0;
                byte[] b = null;
                while (res.next()) {
                    //se lee la cadena de bytes de la base de datos
                    if (id == 1) {
                        b = res.getBytes("Foto1");
                    } else if (id == 2) {
                        b = res.getBytes("Foto2");
                    } else if (id == 3) {

                        System.out.println("heyyy");
                        b = res.getBytes("Foto1");
                        ban = res.getInt("TESTSHEET");
                    }
                    // esta cadena de bytes sera convertida en una imagen

                    data = ConvertirImagen(b);
                    i++;
                }
            }
        } catch (IOException | SQLException ex) {
            LOG.severe(ex.getMessage());
            CMensajes.mostrarExcepcion(ex);
        }
        return data;
    }

    private Connection getConexion() {
        Connection con;

        try {
            Driver d = (Driver) Class.forName("com.mysql.jdbc.Driver").newInstance();
          String eve = com.soltelec.servidor.conexion.Conexion.getUrl();
            con = DriverManager.getConnection(com.soltelec.servidor.conexion.Conexion.getUrl(), user, pass);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | SQLException e) {
            LOG.severe(e.getMessage());
            CMensajes.mostrarExcepcion(e);
            return null;
        }

        return con;

    }

    private Image ConvertirImagen(byte[] bytes) throws IOException {
        if (bytes == null) {
            CMensajes.mensajeAdvertencia("No hay foto");
            return null;
        }
        ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
        Iterator readers = ImageIO.getImageReadersByFormatName("jpeg");
        ImageReader reader = (ImageReader) readers.next();
        Object source = bis; // File or InputStream
        ImageInputStream iis = ImageIO.createImageInputStream(source);
        reader.setInput(iis, true);
        ImageReadParam param = reader.getDefaultReadParam();
        return reader.read(0, param);
    }

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        int fila = jTable2.rowAtPoint(evt.getPoint());
        int columna = 0;
        if ((fila > -1) && (columna > -1)) {
            try {
                dTipoPrueba = Integer.parseInt(String.valueOf(modelo.getValueAt(fila, columna)));
            } catch (NumberFormatException ex) {
                LOG.severe(ex.getMessage());
            }
        }
        TipoPruebaJpaController prue = new TipoPruebaJpaController();
        modelo2 = new DefaultTableModel();
        List<Object[]> results = prue.findPrueba(ban, dTipoPrueba);

// Ahora sólo hay que rellenar el DefaultTableModel con los datos del ResultSet. La forma "manual" de hacer esto es la siguiente
// Creamos las columnas.
        modelo2.addColumn("Prueba");
        modelo2.addColumn("Hoja Prueba");
        modelo2.addColumn("Tipo Prueba");
        modelo2.addColumn("Pista");
        modelo2.addColumn("Usuario");
        modelo2.addColumn("Autorizada");
        modelo2.addColumn("Aprobada");
        modelo2.addColumn("Abortada");
        modelo2.addColumn("Fecha Prueba");

        for (Object[] result : results) {
            // Se crea un array que será una de las filas de la tabla.
            Object[] fila1; // Hay tres columnas en la tabla
            fila1 = result;
            modelo2.addRow(fila1);
        }

        jTable3.setModel(modelo2);

        jScrollPane3.setViewportView(jTable3);

        ///////////
        modelo3 = new DefaultTableModel();

        List<Object[]> results3 = prue.findMedida(mprueba, dTipoPrueba);

// Ahora sólo hay que rellenar el DefaultTableModel con los datos del ResultSet. La forma "manual" de hacer esto es la siguiente
// Creamos las columnas.
        modelo3.addColumn("Serial");
        modelo3.addColumn("Serial Medida");
        modelo3.addColumn("Tipo");
        modelo3.addColumn("Valor");
        modelo3.addColumn("Unidad");

        for (Object[] results31 : results3) {
            // Se crea un array que será una de las filas de la tabla.
            Object[] fila2; // Hay tres columnas en la tabla
            fila2 = results31;
            modelo3.addRow(fila2);
        }
        jTable4.setModel(modelo3);
        jScrollPane4.setViewportView(jTable4);
    }

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {
        int fila = jTable3.rowAtPoint(evt.getPoint());
        int columna = 0;

        if ((fila > -1) && (columna > -1)) {
            try {
                mprueba = Integer.parseInt(String.valueOf(modelo2.getValueAt(fila, columna)));
            } catch (NumberFormatException ex) {
                LOG.severe(ex.getMessage());
            }
        }

        TipoPruebaJpaController prue = new TipoPruebaJpaController();
        modelo3 = new DefaultTableModel();
        List<Object[]> results3 = prue.findMedida(mprueba, dTipoPrueba);

// Ahora sólo hay que rellenar el DefaultTableModel con los datos del ResultSet. La forma "manual" de hacer esto es la siguiente
// Creamos las columnas.
        modelo3.addColumn("Serial");
        modelo3.addColumn("Serial Medida");
        modelo3.addColumn("Tipo");
        modelo3.addColumn("Descripcion");
        modelo3.addColumn("Valor");
        modelo3.addColumn("Unidad");

        for (Object[] results31 : results3) {
            // Se crea un array que será una de las filas de la tabla.
            Object[] fila2; // Hay tres columnas en la tabla
            fila2 = results31;
            modelo3.addRow(fila2);
        }

        jTable4.setModel(modelo3);
        jScrollPane4.setViewportView(jTable4);

        /////////// Defectos
        modelo4 = new DefaultTableModel();

        List<Object[]> results4 = prue.findDefectos(mprueba);

// Ahora sólo hay que rellenar el DefaultTableModel con los datos del ResultSet. La forma "manual" de hacer esto es la siguiente
// Creamos las columnas.
        modelo4.addColumn("Prueba");
        modelo4.addColumn("Serial");
        modelo4.addColumn("Descripción");
        modelo4.addColumn("Tipo");

        for (Object[] results41 : results4) {
            // Se crea un array que será una de las filas de la tabla.
            Object[] fila2; // Hay tres columnas en la tabla
            fila2 = results41;
            modelo4.addRow(fila2);
        }

        jTable5.setModel(modelo4);
        jScrollPane5.setViewportView(jTable5);
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        Image dtCat = null;

        if (getfoto(1) != null) {
            try {
                dtCat = getfoto(1);
            } catch (Exception e) {
                LOG.severe(e.getMessage());
            }
            data = dtCat.getScaledInstance(321, 230, Image.SCALE_AREA_AVERAGING);
            icon = new ImageIcon(data);
            jLabel1.setIcon(icon);
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        Image dtCat = null;

        if (getfoto(2) != null) {
            try {
                dtCat = getfoto(2);
            } catch (Exception e) {
                LOG.severe(e.getMessage());
            }

            data = dtCat.getScaledInstance(321, 230, Image.SCALE_AREA_AVERAGING);

            icon = new ImageIcon(data);
            jLabel1.setIcon(icon);
        }
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {

        FrmPruebas pruebas = new FrmPruebas();
        pruebas.setVisible(true);
        try {
            if (!Principal.desktop.isAncestorOf(frame)) {
                Principal.desktop.add(frame);
            }
            frame.toFront();
            frame.setMaximum(true);
            frame.setVisible(true);

            this.dispose();
        } catch (PropertyVetoException ex) {
            LOG.severe(ex.getMessage());
        }

    }

    private void dimension() {
        Dimension dim = super.getToolkit().getScreenSize();
        this.setSize(dim);
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    public javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    // End of variables declaration                   
}
