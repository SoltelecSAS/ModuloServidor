/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * Fr_Calibracion1.java
 *
 * Created on 21/07/2011, 09:17:04 AM
 */
package com.soltelec.servidor.igrafica;

import com.soltelec.servidor.model.Defxprueba;
import com.soltelec.servidor.model.CalibracionLinealidad;
import com.soltelec.servidor.model.HojaPruebas;
import com.soltelec.servidor.model.Medidas;
import com.soltelec.servidor.model.Calibraciones;
import com.soltelec.servidor.model.CalibracionDosPuntos;
import com.soltelec.servidor.model.Pruebas;
import com.soltelec.servidor.model.Propietarios;
import com.soltelec.servidor.model.Vehiculos;
import com.soltelec.servidor.dao.CalibracionDosPuntosJpaController;
import com.soltelec.servidor.dao.CalibracionesJpaController;
import com.soltelec.servidor.dao.PruebasJpaController;
import com.soltelec.servidor.dao.VehiculosJpaController;
import com.soltelec.servidor.model.Conductores;
import com.soltelec.servidor.utils.CMensajes;
import com.soltelec.servidor.utils.GenericExportExcel;
import com.soltelec.servidor.utils.JTitlePanel;
import java.awt.Dimension;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.Random;
import java.lang.Integer;

/**
 *
 * @author Gerencia TIC
 */
public final class ReporteGeneral extends javax.swing.JInternalFrame {

    JFileChooser fc;
    JPanel componentPanel;
    JTitlePanel componentTitlePanel;
    private DefaultTableModel modeloVerificaciones;
    private DefaultTableModel modeloFugas;
    private DefaultTableModel modeloPruebasAbortadas;
    private DefaultTableModel modeloGases;
    private DefaultTableModel modeloPruebasSonoras;
    private DefaultTableModel modeloPruebasRechazadas;
    private DefaultTableModel modeloPersona;
    private DefaultTableModel modeloVehiculo;

    ///---
    private String fecha = "";

    /**
     * Creates new form Fr_Calibracion1
     */
    public ReporteGeneral() {
        super("Medidas Calibración",
                true, //resizable
                true, //closable
                false, //maximizable
                true);
        initModels();
        initComponents();
        configurarRadioButtons();
        dimension();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroup3 = new javax.swing.ButtonGroup();
        btnMostrar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jXDatePicker1.setFormats(new SimpleDateFormat("dd/MM/yyyy"));
        jXDatePicker2 = new org.jdesktop.swingx.JXDatePicker();
        jXDatePicker2.setFormats(new SimpleDateFormat("dd/MM/yyyy"));
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        rdbDiesel = new javax.swing.JRadioButton();
        rdbGasolina = new javax.swing.JRadioButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        JScrollPane1 = new javax.swing.JScrollPane();
        tblPruebaGases = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPersonas = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblVehiculos = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblPruebasAbortadas = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblPruebaSonora = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFugas = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblVerificaciones = new javax.swing.JTable();
        progreso = new javax.swing.JProgressBar();

        setClosable(true);
        setMaximumSize(this.getToolkit().getScreenSize());

        btnMostrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/servidor/images/page_down.png"))); // NOI18N
        btnMostrar.setText("Mostrar");
        btnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/servidor/images/save.png"))); // NOI18N
        jButton2.setText("Guardar");
        jButton2.setName("Prueba de Gases"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Fecha Inicial");

        jLabel6.setText("Fecha Final");

        rdbDiesel.setText("Diesel");
        rdbDiesel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbDieselActionPerformed(evt);
            }
        });

        rdbGasolina.setText("Gasolina");

        jTabbedPane1.setMaximumSize(this.getToolkit().getScreenSize());
        jTabbedPane1.setName(""); // NOI18N
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(600, 400));

        JScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        JScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        JScrollPane1.setMaximumSize(this.getToolkit().getScreenSize());
        JScrollPane1.setName("Prueba de Gases"); // NOI18N

        tblPersonas.setModel(modeloPersona);
        tblPersonas.setName("Información Propietario");
        jScrollPane6.setViewportView(tblPersonas);
        tblPersonas.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTabbedPane1.addTab("Información Propietario", jScrollPane6);

        tblVehiculos.setModel(modeloVehiculo);
        tblVehiculos.setName("Información Vehiculo"); // NOI18N
        jScrollPane7.setViewportView(tblVehiculos);
        tblVehiculos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTabbedPane1.addTab("Información Vehiculo", jScrollPane7);

        tblPruebaGases.setModel(modeloGases);
        tblPruebaGases.setName("Prueba Gases");
        JScrollPane1.setViewportView(tblPruebaGases);
        tblPruebaGases.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTabbedPane1.addTab("Prueba Gases", JScrollPane1);

        jScrollPane3.setMaximumSize(this.getToolkit().getScreenSize());

        tblPruebasAbortadas.setModel(modeloPruebasAbortadas);
        tblPruebasAbortadas.setName("Pruebas Abortadas"); // NOI18N
        jScrollPane3.setViewportView(tblPruebasAbortadas);

        jTabbedPane1.addTab("Pruebas Abortadas", jScrollPane3);

        jScrollPane5.setMaximumSize(this.getToolkit().getScreenSize());

        tblPruebaSonora.setModel(modeloPruebasSonoras);
        tblPruebaSonora.setName("Pruebas Sonoras"); // NOI18N
        jScrollPane5.setViewportView(tblPruebaSonora);

        jTabbedPane1.addTab("Pruebas Sonoras", jScrollPane5);

        tblFugas.setModel(modeloFugas);
        tblFugas.setName("Fugas"); // NOI18N
        jScrollPane1.setViewportView(tblFugas);

        jTabbedPane1.addTab("Verificacion de Fugas", jScrollPane1);

        jScrollPane2.setMaximumSize(this.getToolkit().getScreenSize());

        tblVerificaciones.setModel(modeloVerificaciones);
        tblVerificaciones.setName("Verificaciones"); // NOI18N
        jScrollPane2.setViewportView(tblVerificaciones);

        jTabbedPane1.addTab("Verificaciones / Calibraciones", jScrollPane2);

        progreso.setMaximum(7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel5)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(rdbDiesel)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(rdbGasolina)))
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel6)
                                                .addGap(18, 18, 18)
                                                .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnMostrar)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton2)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(progreso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(rdbDiesel)
                                        .addComponent(rdbGasolina))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel6)
                                        .addComponent(btnMostrar)
                                        .addComponent(jButton2))
                                .addGap(7, 7, 7)
                                .addComponent(progreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        
        
    private void initModels() {
        // ***** MODELO PARA LAS CALIBRACIONS *****
        modeloVerificaciones = new DefaultTableModel();
        modeloVerificaciones.addColumn("Serial");//00
//---
        if (rdbGasolina != null && rdbGasolina.isSelected()) {
            modeloVerificaciones.addColumn("PEF");
        } else {
            modeloVerificaciones.addColumn("LTOE");
        }
//---               
        modeloVerificaciones.addColumn("Fecha");//02

        if (rdbGasolina != null && rdbGasolina.isSelected()) {
            modeloVerificaciones.addColumn("HC Bajo/Medio");//03
            modeloVerificaciones.addColumn("CO Bajo/Medio");//04
            modeloVerificaciones.addColumn("CO2 Bajo/Medio");//05           
            modeloVerificaciones.addColumn("HC Alto");//06
            modeloVerificaciones.addColumn("CO Alto");//07
            modeloVerificaciones.addColumn("CO2 Alto");//08
            modeloVerificaciones.addColumn("HC Banco Bajo/Medio");//9
            modeloVerificaciones.addColumn("CO Banco Bajo/Medio");//10
            modeloVerificaciones.addColumn("CO2 Banco Bajo/Medio");//11
            modeloVerificaciones.addColumn("O2 Banco Bajo/Medio");//12
            modeloVerificaciones.addColumn("HC Banco Alto");//13
            modeloVerificaciones.addColumn("CO Banco Alto");//14
            modeloVerificaciones.addColumn("CO2 Banco Alto");//15
            modeloVerificaciones.addColumn("O2 Banco Alto");//16
        } else {
            modeloVerificaciones.addColumn("Filtro 0");//16
            modeloVerificaciones.addColumn("Valor 0");//16
            modeloVerificaciones.addColumn("Filtro 1");//16
            modeloVerificaciones.addColumn("Valor 1");//16
            modeloVerificaciones.addColumn("Filtro 2");//16
            modeloVerificaciones.addColumn("Valor 2");//16
            modeloVerificaciones.addColumn("Filtro 3");//16
            modeloVerificaciones.addColumn("Valor 3");//16
        }

        modeloVerificaciones.addColumn("Usuario");//17
        modeloVerificaciones.addColumn("Estado");//18

        // ***** MODELO PARA FUGAS *****
        modeloFugas = new DefaultTableModel();
        modeloFugas.addColumn("Serial");
        modeloFugas.addColumn("PEF");
        modeloFugas.addColumn("Fecha");
        modeloFugas.addColumn("Usuario");
        modeloFugas.addColumn("Estado");

        // ***** MODELO PARA LAS PRUEBAS DE GASES *****
        modeloGases = new DefaultTableModel();
        modeloGases.addColumn("NOMBRE PROPIETARIO");
        modeloGases.addColumn("CEDULA");
        modeloGases.addColumn("PLACA");
        modeloGases.addColumn("MODELO");
        modeloGases.addColumn("LINEA");
        modeloGases.addColumn("MARCA");
        modeloGases.addColumn("TIPO VEHICULO");
        modeloGases.addColumn("CILINDRAJE");
        modeloGases.addColumn("CLASE VEHICULO");
        modeloGases.addColumn("TIPO SERVICIO");
        modeloGases.addColumn("NUMERO MOTOR");
        modeloGases.addColumn("VIN");
        modeloGases.addColumn("TIEMPOS DEL MOTOR");
        modeloGases.addColumn("TIPO COMBUSTIBLE");

        modeloGases.addColumn("Numero Prueba");//0
        modeloGases.addColumn("Fecha y Hora Inicio An");//1
        modeloGases.addColumn("Fecha y Hora Fin An");//2
        modeloGases.addColumn("Fecha y Hora Aborto");//3
        modeloGases.addColumn("Causa Aborto");//4*/
        /**
         * **Propietarios***
         */
        modeloPersona = new DefaultTableModel();
        modeloPersona.addColumn("Propietarios");//0
        modeloPersona.addColumn("Tipo Documento");//1
        modeloPersona.addColumn("No. Documento");//2
        modeloPersona.addColumn("Celular Propietario");//3
        modeloPersona.addColumn("Telefono Propietario");//4
        modeloPersona.addColumn("Direccion");//5
        modeloPersona.addColumn("E-Mail");//6
        modeloPersona.addColumn("Ciudad Propietario");//7
        modeloPersona.addColumn("Tipo Licencia Propietario");//8
        modeloPersona.addColumn("Licencia Propietario");//9
        /**
         * Datos de Conductor*
         */
        modeloPersona.addColumn("Conductor");//10
        modeloPersona.addColumn("Tipo Documento Conductor");//11
        modeloPersona.addColumn("N° Documento Conductor");//12
        modeloPersona.addColumn("Celular Conductor");//13
        modeloPersona.addColumn("Telefono Conductor");//14
        modeloPersona.addColumn("Direccion Conductor");//15
        modeloPersona.addColumn("E-Mail Conductor");//16
        modeloPersona.addColumn("Ciudad Conductor");//17
        modeloPersona.addColumn("Tipo Licencia Conductor");//18
        modeloPersona.addColumn("Licencia Conductor");//19

//Vehiculos
//------- 
        modeloVehiculo = new DefaultTableModel();
        modeloVehiculo.addColumn("Marca");//0
        modeloVehiculo.addColumn("Linea");//1
        modeloVehiculo.addColumn("Año Modelo");//2
        modeloVehiculo.addColumn("Placa");//3
        modeloVehiculo.addColumn("Cilindraje");//4
        modeloVehiculo.addColumn("Clase");//5
        modeloVehiculo.addColumn("Servicio");//6
        modeloVehiculo.addColumn("No Motor");//7
        modeloVehiculo.addColumn("No VIN");//8
        modeloVehiculo.addColumn("Lic. Transito");//9
        modeloVehiculo.addColumn("Kilometraje");//10
        modeloVehiculo.addColumn("Tiempos motor");//11

        if (rdbGasolina != null && rdbGasolina.isSelected()) {

        } else {
            modeloVehiculo.addColumn("Diametro");//12
        }

//-------   
        if (rdbGasolina != null && rdbGasolina.isSelected()) {
            modeloGases.addColumn("T° Motor");//5
            modeloGases.addColumn("RPM Ralenti");//6
            modeloGases.addColumn("HC Ralenti");//7
            modeloGases.addColumn("CO Ralenti");//8
            modeloGases.addColumn("CO2 Ralenti");//9
            modeloGases.addColumn("O2 Ralenti");//10
            modeloGases.addColumn("RPM Crucero");//11
            modeloGases.addColumn("HC Crucero");//12
            modeloGases.addColumn("CO Crucero");//13
            modeloGases.addColumn("CO2 Crucero");//14
            modeloGases.addColumn("O2 Crucero");//15
            modeloGases.addColumn("Fugas Tubo Escape");//16
            modeloGases.addColumn("Fugas Silenciador");//17
            modeloGases.addColumn("Presencia Tapas Combustible");//18
            modeloGases.addColumn("Presencia Tapa Aceite");//19
            modeloGases.addColumn("Salidas Adicionales");//20
            modeloGases.addColumn("Humo Negro o Azul");//21
            modeloGases.addColumn("Incumplimiento Niveles");//22
            modeloGases.addColumn("Dilución");//23
            modeloGases.addColumn("Temperatura Ambiente");//24
            modeloGases.addColumn("Humedad Relativa");//25
            modeloGases.addColumn("Estado");//26
            //60

        } else {
            modeloGases.addColumn("Modificaciones al Motor");//22
            modeloGases.addColumn("Velocidad Ralenti");//23
            //24
            modeloGases.addColumn("Velocidad Gobernada");//25
            modeloGases.addColumn("T° Motor");//26
            modeloGases.addColumn("Ciclo Preliminar");//27
            modeloGases.addColumn("Primer Ciclo");//28
            modeloGases.addColumn("Segundo Ciclo");//29
            modeloGases.addColumn("Tercer Ciclo");//30
            modeloGases.addColumn("Promedio Ciclos");//31
            modeloGases.addColumn("Fugas Tube Escape");//32
            modeloGases.addColumn("Fugas Silenciador");//33
            modeloGases.addColumn("Ausencia Tapa Combustible");//34
            modeloGases.addColumn("Ausencia Tapa Aceite");//35
            modeloGases.addColumn("Salidas Adicionales");//36
            modeloGases.addColumn("Humo Blanco o Azul");//37
            modeloGases.addColumn("Obstaculos Acelerador");//38
            modeloGases.addColumn("Gobernador no Limita");//39
            modeloGases.addColumn("Velocidad no Alcanzada");//40
            modeloGases.addColumn("Mal Funcionamiento Motor");//41
            modeloGases.addColumn("Incumplimiento Niveles");//42
            modeloGases.addColumn("Temperatura Ambiente");
            modeloGases.addColumn("Humedad Relativa");
            modeloGases.addColumn("Estado");//43            
        }

        // ***** MODELO PRUEBAS ABORTADAS *****
        modeloPruebasAbortadas = new DefaultTableModel();
        modeloPruebasAbortadas.addColumn("Nro Prueba");
        modeloPruebasAbortadas.addColumn("Placa");
        modeloPruebasAbortadas.addColumn("Hora y Fecha Prueba");
        modeloPruebasAbortadas.addColumn("Motivo aborto");
        modeloPruebasAbortadas.addColumn("Hora y Fecha Aborto");

        // ***** MODELO PRUEBAS RECHAZADAS *****
//        modeloPruebasRechazadas.addColumn("Nro Hoja Prueba");
//        modeloPruebasRechazadas.addColumn("Placa");
//        modeloPruebasRechazadas.addColumn("Hora y Fecha Prueba");
//        modeloPruebasRechazadas.addColumn("Fecha expiracion");
        // ***** MODELO PRUEBAS SONORAS *****
        modeloPruebasSonoras = new DefaultTableModel();
        modeloPruebasSonoras.addColumn("Nro Prueba");
        modeloPruebasSonoras.addColumn("Placa");
        modeloPruebasSonoras.addColumn("Hora y Fecha Prueba");
        modeloPruebasSonoras.addColumn("Motivo aborto");
        modeloPruebasSonoras.addColumn("Hora y Fecha Aborto");
        modeloPruebasSonoras.addColumn("PSonora Exosto");
    }

    private void fillData(Date fechaInicial, Date fechaFinal) {
        initModels();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Object[] datos;
        progreso.setValue(1);

        // ----- DATOS PARA LAS VERIFICACIONES -----
        datos = new Object[modeloVerificaciones.getColumnCount()];
        if (rdbGasolina.isSelected()) {
            List<CalibracionDosPuntos> calibracionesDosPuntos = new CalibracionDosPuntosJpaController().findCalibracionDosPuntosByFecha(fechaInicial, fechaFinal);

            for (CalibracionDosPuntos calibracionDosPunto : calibracionesDosPuntos) {

                datos[0] = calibracionDosPunto.getEquipo().getReolucionserial();
                datos[1] = calibracionDosPunto.getEquipo().getPef();
                datos[2] = sdf.format(calibracionDosPunto.getFecha());
                datos[3] = calibracionDosPunto.getBmHc();
                datos[4] = calibracionDosPunto.getBmCo();
                datos[5] = calibracionDosPunto.getBmCo2();
                datos[6] = calibracionDosPunto.getAltaHc();
                datos[7] = calibracionDosPunto.getAltaCo();
                datos[8] = calibracionDosPunto.getAltaCo2();
                datos[9] = calibracionDosPunto.getBancoBmHc();
                datos[10] = calibracionDosPunto.getBancoBmCo();
                datos[11] = calibracionDosPunto.getBancoBmCo2();
                datos[12] = calibracionDosPunto.getBancoBmO2();
                datos[13] = calibracionDosPunto.getBancoAltaHc();
                datos[14] = calibracionDosPunto.getBancoAltaCo();
                datos[15] = calibracionDosPunto.getBancoAltaCo2();
                datos[16] = calibracionDosPunto.getBancoAltaO2();
                datos[17] = calibracionDosPunto.getUsuario();
                datos[18] = (calibracionDosPunto.isAprobada()) ? "Aprobada" : "Reprobada";

                modeloVerificaciones.addRow(datos);
            }

        } else {
            
            List<CalibracionLinealidad> calibraciones = new CalibracionesJpaController().findCalibracionesDiesel(fechaInicial, fechaFinal);

            for (Calibraciones calibracion : calibraciones) {
                if (calibracion.getEquipo().getPef() == 364) {  ///---   
                    datos[0] = calibracion.getEquipo().getReolucionserial();
                    datos[1] = calibracion.getEquipo().getPef();
                    datos[2] = sdf.format(calibracion.getFecha());
                    datos[3] = "0.0";
                    Random claseRandom = new Random();
                    Integer dato = claseRandom.nextInt(3);
                    float b = dato.floatValue();
                    
                    datos[4] = b/10;
                    datos[5] = calibracion.getValor1();
                    datos[6] = calibracion.getValor4();
                    datos[7] = calibracion.getValor2();
                    datos[8] = calibracion.getValor5();
                    datos[9] = calibracion.getValor3();
                    datos[10] = calibracion.getValor6();
                    datos[11] = calibracion.getUsuario().getNombreusuario();
                    datos[12] = (calibracion.isAprobada()) ? "Aprobada" : "Reprobada";

                }///---

                //
                if (!fecha.equals(datos[2]) && datos[2] != null) {
                    modeloVerificaciones.addRow(datos);
                    fecha = (String) datos[2];
                    //CMensajes.mensajeAdvertencia("Fecha en datos[2]: "+fecha);
                } else;
                //modeloVerificaciones.addRow(datos);
            }
        }
        tblVerificaciones.setEnabled(false);
        tblVerificaciones.setModel(modeloVerificaciones);
        progreso.setValue(2);

        /* ----- DATOS PARA FUGAS ----- */
        datos = new Object[modeloFugas.getColumnCount()];
        List<Calibraciones> verificacionesFugas = new CalibracionesJpaController().findFugas(fechaInicial, fechaFinal);

        for (Calibraciones verificacionFugas : verificacionesFugas) {
            datos[0] = verificacionFugas.getEquipo().getReolucionserial();
            datos[1] = verificacionFugas.getEquipo().getPef();
            datos[2] = sdf.format(verificacionFugas.getFecha());
            datos[3] = verificacionFugas.getUsuario();
            datos[4] = (verificacionFugas.isAprobada()) ? "Aprobada" : "Reprobada";
            modeloFugas.addRow(datos);
        }
        tblFugas.setEnabled(false);
        tblFugas.setModel(modeloFugas);

        progreso.setValue(
                3);

        /* ----- DATOS PARA LAS PRUEBAS DE GASES ----- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        datos = new Object[modeloGases.getColumnCount()];
        List<HojaPruebas> listaHojaPruebasPorFecha;

        if (rdbDiesel.isSelected()) {
            listaHojaPruebasPorFecha = new PruebasJpaController().listaHojaPruebasDieselPorFecha(fechaInicial, fechaFinal);
        } else {
            listaHojaPruebasPorFecha = new PruebasJpaController().findHPXFecha(fechaInicial, fechaFinal);
        }

        /**
         * DE AQUI EN ADELANTE BUSCA LAS HOJAS DE PRUEBA
         * -----------------------------------------------------------------------------------------------------------------------------------------
         */
        for (HojaPruebas hp : listaHojaPruebasPorFecha) {
            if(hp == null || hp.getVehiculos() == null || hp.getVehiculos().getCarplate() == null) continue;
            System.out.println("INSERTANDO DATOS PARA VEHICULO : " + hp.getVehiculos().getCarplate());

            int numeroTipoGasolina;
            numeroTipoGasolina = hp.getVehiculos().getTiposGasolina().getFueltype(); // fuelType = 3 Diesel

            for (Pruebas p : hp.getPruebasCollection()) {

                for (int i = 0; i < datos.length; i++) {
                    datos[i] = "";
                }
//AQUI PONE LOS DATOS DEL VEHICULO----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------                

                if (p.getTipoPrueba().getTesttype() == 8) {
                    datos[0] = hp.getVehiculos().getPropietarios().getNombres();
                    datos[1] = hp.getVehiculos().getPropietarios().getCarowner();
                    datos[2] = hp.getVehiculos().getCarplate();
                    datos[3] = hp.getVehiculos().getModelo();
                    datos[4] = hp.getVehiculos().getLineasVehiculos().getCrlname();
                    datos[5] = hp.getVehiculos().getMarcas().getNombremarca();
                    datos[6] = hp.getVehiculos().getTipoVehiculo().getNombre();
                    datos[7] = hp.getVehiculos().getCilindraje();
                    datos[8] = hp.getVehiculos().getClasesVehiculo().getNombreclase();
                    datos[9] = hp.getVehiculos().getServicios().getNombreservicio();
                    datos[10] = hp.getVehiculos().getNumeromotor();
                    datos[11] = hp.getVehiculos().getVin();
                    datos[12] = hp.getVehiculos().getTiemposmotor() + "T";//TIEMPOS DEL MOTOR
                    datos[13] = hp.getVehiculos().getTiposGasolina().getNombregasolina();
                    datos[14] = p.getIdPruebas();//Numero de Prueba
                    if (p.getFechaPrueba() != null) {
                        datos[15] = sdf.format(p.getFechaPrueba());//Fecha de la prueba
                        datos[16] = sdf.format(p.getFechaPrueba());//Fecha terminacion?? 
                    } else {
                        datos[15] = sdf.format(p.getFechaFinal());//Fecha de la prueba
                        datos[16] = sdf.format(p.getFechaFinal());//Fecha terminacion??   
                    }
                    datos[17] = p.getFechaAborto();//Fecha de aborto de la prueba
                    datos[18] = p.getComentarioAborto();// No deacuerdo a codificacion------------4

//TERMINA DE PONER LOS DATOS DEL VEHICULO-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//EMPIEZA A PONER LAS MEDIDAS-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                    if ((numeroTipoGasolina == 1 || numeroTipoGasolina == 2 || numeroTipoGasolina == 4) && rdbGasolina.isSelected()) {
                        for (Medidas m : p.getMedidasList()) {
                            switch (m.getTiposMedida().getMeasuretype()) {
                                case 8006://TEmp del motor
                                case 8022://TEmp del motor 2 tiempos
                                    datos[19] = m.getValormedida();
                                    break;
                                case 8005://rpm en ralenti
                                case 8028://rpm en ralenti 2 tiempos
                                    datos[20] = m.getValormedida();
                                    break;
                                case 8001://HC ralenti
                                case 8018://HC ralenti 2 tiempos
                                    datos[21] = m.getValormedida();
                                    break;
                                case 8002://CO ralenti
                                case 8020://CO ralenti 2 tiempos
                                    datos[22] = m.getValormedida();
                                    break;
                                case 8003://CO2 Ralenti
                                case 8019://CO2 Ralenti 2 tiempos
                                    datos[23] = m.getValormedida();
                                    break;
                                case 8004://O2 Ralenti
                                case 8021://O2 Ralenti 2 tiempos
                                    datos[24] = m.getValormedida();
                                    break;
                                case 8011://RPM CRUCERO
                                    datos[25] = m.getValormedida();
                                    break;
                                case 8007://HC crucero
                                    datos[26] = m.getValormedida();
                                    break;
                                case 8008://CO crucero
                                    datos[27] = m.getValormedida();
                                    break;
                                case 8009://CO2 crucero
                                    datos[28] = m.getValormedida();
                                    break;
                                case 8010://O2 crucero
                                    datos[29] = m.getValormedida();
                                    break;
                                case 8031://Temperatura ambiente
                                    datos[38] = m.getValormedida();
                                case 8032: //Humedad Relativa
                                    datos[39] = m.getValormedida();
                                default:
                                    break;
                            }

                        }
//TERMINA A PONER LAS MEDIDAS-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------                        

                        if (p.getAprobada().trim().equalsIgnoreCase("Y")) {
                            datos[40] = "Aprobada";
                        } else if (p.getAprobada().trim().equalsIgnoreCase("N")) {
                            datos[40] = "Reprobada";
                        }

                    }//end if vehiculo de gasolina
//si los vehiculos son diesel---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                    if (numeroTipoGasolina == 3 && rdbDiesel.isSelected()) {
                        //22 y 23 son defectos
                        datos[19] = "----";
                        //datos[17] = "--";
                        //datos[23] = "--";

                        for (Medidas m : p.getMedidasList()) {
                            switch (m.getTiposMedida().getMeasuretype()) {
                                case 8035: //Velocidad Ralenti
                                    datos[20] = m.getValormedida();
                                    break;
                                case 8036: //Velocidad Gobernada
                                    datos[21] = m.getValormedida();
                                    break;
                                case 8034: //Temperatura Motor
                                    datos[22] = m.getValormedida();
                                    break;
                                case 8033://valor del ciclo PRELIMINAR
                                    datos[23] = m.getValormedida();
                                    break;
                                case 8013://primer ciclo de opacidad
                                    datos[24] = m.getValormedida();
                                    break;
                                case 8014://segundo ciclo
                                    datos[25] = m.getValormedida();
                                    break;
                                case 8015://tercer ciclo
                                    datos[26] = m.getValormedida();
                                    break;
                                case 8017://Promedio ciclos
                                    datos[27] = m.getValormedida();
                                    break;
                                case 8031://Temperatura ambiente
                                    datos[39] = m.getValormedida();
                                    break;
                                case 8032: //Humedad Relativa
                                    datos[40] = m.getValormedida();
                                    break;
                                default:
                                    break;

                            }//end switch de las medidas                         
                        }//end for de medidas
                        //defectos
                    }

//EMPIEZA A PONER LOS DEFECTOS-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------                        
                    for (Defxprueba dxp : p.getDefectos()) {

                        switch (dxp.getDefectos().getCardefault()) {
                            case 84002://fugas tubo de escape o silenciador
                                datos[30] = "X";
                                datos[31] = "X";
                                break;
                            case 84000://ausencia de la tapa de combustible
                                datos[32] = "X";
                                break;
                            case 84001://asuencia de la taba de aceite
                                datos[33] = "X";
                                break;
                            case 84003://salidas adicionales
                                datos[34] = "X";
                                break;
                            case 84004://Humo
                                datos[35] = "X";
                                break;
                            case 80000://Humo azul o negro 
                                datos[35] = "X";
                                break;
                            case 84006://Mal funcionamiento del motor
                                datos[37] = "X";
                                break;
                            /*case 84005://Obstaculos impiden el avance del Pedal    
                                    datos[34] = "X";
                                    break;
                                
                                case 84007://Gobernador no limita las revoluciones
                                    datos[35] = "X";
                                    break;*/
                            //no existe defecot vehiculo no alcanza gobernadas    
                            case 84018://concentraciones
                                datos[36] = "X";
                                //System.out.println("Defecto: prueba:" + p.getIdPruebas());
                                break;
                            default:
                                System.out.println("Switch entro al default:  defecto" + dxp.getDefectos().getCardefault());

                                break;
                        }//end switch de los defectos

                    }//end for de defectos
                    //datos[41] = p.getAprobada().equalsIgnoreCase("N") ? "Reprobada" : "Aprobada";  
                    modeloGases.addRow(datos);
                }//end if vehiculo diesel     
                ////////////////////////////////////////////////////termina de poner medidas

                //end if es prueba de gasolina
            }//end for de pruebas en la hoja de pruebas

        }//end for de hojas de pruebas   
        tblPruebaGases.setEnabled(false);
        tblPruebaGases.setModel(modeloGases);

        progreso.setValue(
                4);

        /**
         * ****************************-------------------------FIN DE LOS DATOS
         * DE LA PRUEBA DE GASES----------------------------------------------------------------------------------------------------****************************
         */
        //Vehiculo 
        datos = new Object[modeloVehiculo.getColumnCount()];
        List<HojaPruebas> listaHPPFV;

        if (rdbDiesel.isSelected()) {
            listaHPPFV = new PruebasJpaController().listaHojaPruebasDieselPorFecha(fechaInicial, fechaFinal);
        } else {
            listaHPPFV = new PruebasJpaController().findHPXFecha(fechaInicial, fechaFinal);
        }

        for (HojaPruebas hp : listaHPPFV) {
            int numeroTipoGasolina;
            numeroTipoGasolina = hp.getVehiculos().getTiposGasolina().getFueltype();
            Vehiculos vehiculo = hp.getVehiculos();
            datos[0] = vehiculo.getMarcas().getNombremarca();//Marca del vehiculo
            System.out.println("Placa: " + vehiculo.getCarplate());
            datos[1] = vehiculo.getLineasVehiculos().getCrlname();//Linea
            datos[2] = vehiculo.getModelo();//Modelo
            datos[3] = vehiculo.getCarplate();//Placa
            datos[4] = vehiculo.getCilindraje();//Cilindraje
            datos[5] = vehiculo.getClasesVehiculo().getNombreclase();//Clase
            datos[6] = vehiculo.getServicios().getNombreservicio();//Servicio
            datos[7] = vehiculo.getNumeromotor();//Numero del motor
            datos[8] = vehiculo.getVin();//Numero de VIN o chasis
            datos[9] = vehiculo.getNumerolicencia();//numero de licencia
            datos[10] = vehiculo.getKilometraje();
            datos[11] = vehiculo.getTiemposmotor();
            if (numeroTipoGasolina == 3 && rdbDiesel.isSelected()) {
                datos[12] = vehiculo.getDiametro();
            }
            modeloVehiculo.addRow(datos);
        }
        tblVehiculos.setEnabled(false);
        tblVehiculos.setModel(modeloVehiculo);

        progreso.setValue(
                5);
        /*
        * Informacion de los propietarios
         */
        datos = new Object[modeloPersona.getColumnCount()];
        List<HojaPruebas> listaHPPF;

        if (rdbDiesel.isSelected()) {
            listaHPPF = new PruebasJpaController().listaHojaPruebasDieselPorFecha(fechaInicial, fechaFinal);
        } else {
            listaHPPF = new PruebasJpaController().findHPXFecha(fechaInicial, fechaFinal);
        }
        for (HojaPruebas hpp : listaHPPF) {
            Propietarios propietario = hpp.getPropietarios();
            datos[0] = propietario.getNombres() + " " + propietario.getApellidos();//Nombres del propietario
            datos[1] = propietario.getTipoIdentificacion();//Tipo Identificacion
            datos[2] = propietario.getCarowner();//Numero de identifiacion
            datos[3] = propietario.getCelular();// Celular
            datos[4] = propietario.getNumerotelefono();// Telefono
            datos[5] = propietario.getDireccion();// Direccion
            datos[6] = propietario.getEmail(); // Correo
            datos[7] = propietario.getCiudadades().getNombreciudad(); // Celular
            datos[8] = propietario.getTipolicencia();
            datos[9] = propietario.getNumerolicencia();

            /**
             * *** Informacion del Conductor ****
             */
            Propietarios conductor = hpp.getConductor();
            System.out.println("-----conductor" + conductor.getNombres()+conductor.getApellidos());
            System.out.println("-----identificacion" + conductor.getCarowner());
            datos[10] = conductor.getNombres() + " " + conductor.getApellidos();
            
            datos[11] = conductor.getTipoIdentificacion();
            datos[12] = conductor.getCarowner();
            datos[13] = conductor.getCelular();
            datos[14] = conductor.getNumerotelefono();
            datos[15] = conductor.getDireccion();
            datos[16] = conductor.getEmail();
            datos[17] = conductor.getCiudadades().getNombreciudad();
            datos[18] = conductor.getTipolicencia();
            datos[19] = conductor.getNumerolicencia();
            modeloPersona.addRow(datos);
        }
        tblPersonas.setEnabled(false);
        tblPersonas.setModel(modeloPersona);

        progreso.setValue(
                5);

        /* ----- DATOS PRUEBAS ABORTADAS ----- */
        datos = new Object[modeloPruebasAbortadas.getColumnCount()];

        List<Pruebas> pruebasAbortadas = new PruebasJpaController().findPruebasGasesAbortadas(fechaInicial, fechaFinal);

        for (Pruebas pruebaAbortada : pruebasAbortadas) {
            datos[0] = pruebaAbortada.getIdPruebas();
            datos[1] = pruebaAbortada.getHojaPruebas().getVehiculos().getCarplate();
            datos[2] = sdf.format(pruebaAbortada.getFechaPrueba());
            datos[3] = pruebaAbortada.getComentarioAborto();
            datos[4] = sdf.format(pruebaAbortada.getFechaFinal());;

            modeloPruebasAbortadas.addRow(datos);
        }
        tblPruebasAbortadas.setEnabled(false);
        tblPruebasAbortadas.setModel(modeloPruebasAbortadas);

        progreso.setValue(
                6);

        //***
        /* ----- DATOS PRUEBAS SONORAS */
        int tipoGasolina = (rdbGasolina.isSelected()) ? 1 : 3;
        datos = new Object[modeloPruebasSonoras.getColumnCount()];
        List<Pruebas> pruebasSonoras = new PruebasJpaController().findPruebaSonoraByFecha(fechaInicial, fechaFinal, tipoGasolina);

        for (Pruebas pruebaSonora : pruebasSonoras) {
            datos[0] = pruebaSonora.getIdPruebas();
            datos[1] = pruebaSonora.getHojaPruebas().getVehiculos().getCarplate();
            datos[2] = sdf.format(pruebaSonora.getFechaPrueba());
            datos[3] = pruebaSonora.getComentarioAborto() != null ? pruebaSonora.getComentarioAborto() : " ";
            datos[4] = pruebaSonora.getFechaAborto() != null ? pruebaSonora.getFechaAborto() : " ";
            if (pruebaSonora.getMedidasList() != null) {
                List<Medidas> medidas = pruebaSonora.getMedidasList();
                for (Medidas medida : medidas) {
                    if (medida.getTiposMedida().getMeasuretype() == 7003) {
                        datos[5] = medida.getValormedida();
                    }
                }
            }

            modeloPruebasSonoras.addRow(datos);
        }
        tblPruebaSonora.setEnabled(false);
        tblPruebaSonora.setModel(modeloPruebasSonoras);

        progreso.setValue(
                0);
    }

    private void dimension() {
        Dimension dim = super.getToolkit().getScreenSize();
        setSize((int) dim.getWidth() - ((int) dim.getWidth() * 1) / 100, (int) dim.getHeight() - 97);
    }

    private void btnMostrarActionPerformed(java.awt.event.ActionEvent evt) {
        if (jXDatePicker1.getDate() == null || jXDatePicker2.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Seleccione Fechas");
            return;
        }

        progreso.setValue(1);

        SwingUtilities.invokeLater(
                new Runnable() {

            @Override
            public void run() {
                fillData(jXDatePicker1.getDate(), jXDatePicker2.getDate());
            }
        });

    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        List<JTable> tables = new ArrayList<>();
        tables.add(tblPruebaGases);
        tables.add(tblPruebaSonora);
        tables.add(tblPersonas);
        tables.add(tblVehiculos);
        tables.add(tblPruebasAbortadas);
        tables.add(tblFugas);
        tables.add(tblVerificaciones);

        GenericExportExcel excel = new GenericExportExcel();
        excel.exportExcel(tables);
    }

    private void rdbDieselActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    /**
     * Installs the Kunststoff and Plastic Look And Feels if available in
     * classpath.
     */
    public final void initializeLookAndFeels() {
        try {
            UIManager.installLookAndFeel("JGoodies Plastic 3D",
                    "com.jgoodies.plaf.plastic.Plastic3DLookAndFeel");
            UIManager.setLookAndFeel("com.jgoodies.plaf.plastic.Plastic3DLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException t) {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
                e.printStackTrace(System.err);
            }
        }
    }

    // Variables declaration - do not modify                        
    private javax.swing.JScrollPane JScrollPane1;
    private javax.swing.JButton btnMostrar;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker2;
    private javax.swing.JProgressBar progreso;
    private javax.swing.JRadioButton rdbDiesel;
    private javax.swing.JRadioButton rdbGasolina;
    private javax.swing.JTable tblFugas;
    private javax.swing.JTable tblPruebaGases;
    private javax.swing.JTable tblPersonas;
    private javax.swing.JTable tblVehiculos;
    private javax.swing.JTable tblPruebaSonora;
    private javax.swing.JTable tblPruebasAbortadas;
    private javax.swing.JTable tblVerificaciones;

    // End of variables declaration                   
    private void configurarRadioButtons() {
        rdbGasolina.setSelected(true);
        buttonGroup3.add(rdbDiesel);
        buttonGroup3.add(rdbGasolina);
    }
}
